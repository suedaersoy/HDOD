// <auto-generated />
using System;
using HastaDoktorAPI.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace HastaDoktorAPI.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("HastaDoktorAPI.Models.Doktor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Aciklama")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("Ad")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<bool>("Aktif")
                        .HasColumnType("boolean");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<DateTime>("KayitTarihi")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Soyad")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Telefon")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("UzmanlikAlani")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Doktorlar");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Aciklama = "Kardiyoloji uzmanı, 15 yıl deneyim",
                            Ad = "Dr. Ahmet",
                            Aktif = true,
                            Email = "ahmet.yilmaz@hastane.com",
                            KayitTarihi = new DateTime(2024, 1, 1, 10, 0, 0, 0, DateTimeKind.Utc),
                            Soyad = "Yılmaz",
                            Telefon = "0555-111-1111",
                            UzmanlikAlani = "Kardiyoloji"
                        },
                        new
                        {
                            Id = 2,
                            Aciklama = "Nöroloji uzmanı, baş ağrısı ve migren konusunda uzman",
                            Ad = "Dr. Ayşe",
                            Aktif = true,
                            Email = "ayse.demir@hastane.com",
                            KayitTarihi = new DateTime(2024, 1, 1, 11, 0, 0, 0, DateTimeKind.Utc),
                            Soyad = "Demir",
                            Telefon = "0555-222-2222",
                            UzmanlikAlani = "Nöroloji"
                        },
                        new
                        {
                            Id = 3,
                            Aciklama = "Ortopedi uzmanı, spor yaralanmaları konusunda uzman",
                            Ad = "Dr. Mehmet",
                            Aktif = true,
                            Email = "mehmet.kaya@hastane.com",
                            KayitTarihi = new DateTime(2024, 1, 1, 12, 0, 0, 0, DateTimeKind.Utc),
                            Soyad = "Kaya",
                            Telefon = "0555-333-3333",
                            UzmanlikAlani = "Ortopedi"
                        });
                });

            modelBuilder.Entity("HastaDoktorAPI.Models.Hasta", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Ad")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Adres")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<bool>("Aktif")
                        .HasColumnType("boolean");

                    b.Property<string>("Cinsiyet")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<DateTime>("DogumTarihi")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<DateTime>("KayitTarihi")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Soyad")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Telefon")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.HasKey("Id");

                    b.ToTable("Hastalar");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Ad = "Fatma",
                            Adres = "İstanbul, Türkiye",
                            Aktif = true,
                            Cinsiyet = "Kadın",
                            DogumTarihi = new DateTime(1985, 5, 15, 0, 0, 0, 0, DateTimeKind.Utc),
                            Email = "fatma.ozkan@email.com",
                            KayitTarihi = new DateTime(2024, 1, 1, 13, 0, 0, 0, DateTimeKind.Utc),
                            Soyad = "Özkan",
                            Telefon = "0555-444-4444"
                        },
                        new
                        {
                            Id = 2,
                            Ad = "Ali",
                            Adres = "Ankara, Türkiye",
                            Aktif = true,
                            Cinsiyet = "Erkek",
                            DogumTarihi = new DateTime(1990, 8, 22, 0, 0, 0, 0, DateTimeKind.Utc),
                            Email = "ali.celik@email.com",
                            KayitTarihi = new DateTime(2024, 1, 1, 14, 0, 0, 0, DateTimeKind.Utc),
                            Soyad = "Çelik",
                            Telefon = "0555-555-5555"
                        });
                });

            modelBuilder.Entity("HastaDoktorAPI.Models.Mesaj", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("DoktorId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("GonderimTarihi")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("HastaId")
                        .HasColumnType("integer");

                    b.Property<bool>("HastaTarafindanGonderildi")
                        .HasColumnType("boolean");

                    b.Property<string>("Icerik")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<bool>("Okundu")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("DoktorId");

                    b.HasIndex("HastaId");

                    b.ToTable("Mesajlar");
                });

            modelBuilder.Entity("HastaDoktorAPI.Models.Mesaj", b =>
                {
                    b.HasOne("HastaDoktorAPI.Models.Doktor", "Doktor")
                        .WithMany("Mesajlar")
                        .HasForeignKey("DoktorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("HastaDoktorAPI.Models.Hasta", "Hasta")
                        .WithMany("Mesajlar")
                        .HasForeignKey("HastaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Doktor");

                    b.Navigation("Hasta");
                });

            modelBuilder.Entity("HastaDoktorAPI.Models.Doktor", b =>
                {
                    b.Navigation("Mesajlar");
                });

            modelBuilder.Entity("HastaDoktorAPI.Models.Hasta", b =>
                {
                    b.Navigation("Mesajlar");
                });
#pragma warning restore 612, 618
        }
    }
}
